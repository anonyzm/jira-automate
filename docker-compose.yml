services:
# =========================== Application ============================
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    ports:
       - "8080:80"
    volumes:
      - ./app:/opt/app
    environment:
      APP_ENV: ${APP_ENV}
      APP_DEBUG: ${APP_DEBUG}
      DATABASE_DSN: postgresql://${POSTGRES_USER:-jira_automate}:${POSTGRES_PASSWORD:-jira_automate_password}@${POSTGRES_HOST:-postgres}:5432/${POSTGRES_DB:-jira_automate}
      JIRA_LINK: ${JIRA_LINK}
      JIRA_BASE_URL: ${JIRA_BASE_URL}
      JIRA_TOKEN: ${JIRA_TOKEN}
      MESSENGER_TRANSPORT_DSN: ${MESSENGER_TRANSPORT_DSN}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      KAFKA_TOPIC_EVENT: ${KAFKA_TOPIC_EVENT}
      KAFKA_TOPIC_AI: ${KAFKA_TOPIC_AI}
      KAFKA_TOPIC_REPORT: ${KAFKA_TOPIC_REPORT}
      JIRA_PROJECT_ID: ${JIRA_PROJECT_ID}
      JIRA_TEST_MODE: ${JIRA_TEST_MODE}
      JIRA_TEST_TAG: ${JIRA_TEST_TAG}
      JIRA_AI_TAG: ${JIRA_AI_TAG}
      JIRA_AI_BASE_STATUS: ${JIRA_AI_BASE_STATUS}
      JIRA_AI_ASSIGNEE: ${JIRA_AI_ASSIGNEE}
    networks:
      - jira-automate
    depends_on:
      - kafka
      - postgres

# ============================== Database =============================
  postgres:
    image: postgres:15-alpine
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-jira_automate}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-jira_automate_password}
      POSTGRES_DB: ${POSTGRES_DB:-jira_automate}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
    networks:
      - jira-automate
    restart: unless-stopped

# ============================== Kafka ===============================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - jira-automate

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092" # Listener for internal Docker network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    networks:
      - jira-automate

  kafka-setup:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka-setup
    volumes:
      - ./docker/kafka/create-topics.sh:/opt/create-topics.sh:ro
    command: ["/bin/bash", "/opt/create-topics.sh"]
    depends_on:
      - kafka
    networks:
      - jira-automate

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - jira-automate

networks:
  jira-automate:
    driver: bridge